name: Publish to nexus apt
description: "Builds and publish zip package for the xunit"

inputs:
  service_name:
    description: "The name of the service"
    required: true
  environment:
    description: "The environment"
    required: true
  version:
    description: "The version"
    required: true
  base_version:
    description: "The base version"
    required: true
  staging_run_number:
    description: "The run number of the staging version (if exists)"
    required: true
  nexus_apt_debian:
    description: "Nexus APT repo host for release"
    required: true
  nexus_apt_debian_staging:
    description: "Nexus APT repo host for staging"
    required: true
  nexus_apt_debian_pre:
    description: "Nexus APT repo host for prerelease"
    required: true
  nexus_apt_repo_username:
    description: "Nexus APT repo username"
    required: true
  nexus_apt_repo_password:
    description: "Nexus APT repo password"
    required: true
  is_hotfix:
    description: "Is this a hotfix?"
    required: true
  nuget_github_host:
    description: "The GitHub NuGet host"
    required: true
  nuget_github_username:
    description: "The GitHub NuGet username"
    required: true
  nuget_github_password:
    description: "The GitHub NuGet password"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x

    - name: Add nuget source
      if: ${{ ( inputs.environment != 'release' || ( inputs.environment == 'release' && inputs.is_hotfix == 'true')) }}
      run: >
        dotnet nuget add source ${{ inputs.nuget_github_host }} --name github --username ${{ inputs.nuget_github_username }}
        --password ${{ inputs.nuget_github_password }} --store-password-in-clear-text
      shell: bash
      working-directory: src/devices/${{inputs.service_name}}

    - name: Publish service
      if: ${{ ( inputs.environment != 'release' || ( inputs.environment == 'release' && inputs.is_hotfix == 'true')) }}
      run: >
        dotnet publish ${{inputs.service_name}}.csproj --configuration Release --output Publish/opt/hector/${{ inputs.service_name }}
        -r linux-arm --self-contained true /p:AssemblyVersion=${{ inputs.version }} /p:FileVersion=${{ inputs.version }}
      shell: bash
      working-directory: src/devices/${{inputs.service_name}}

    - name: Create file paths
      if: ${{ ( inputs.environment != 'release' || ( inputs.environment == 'release' && inputs.is_hotfix == 'true')) }}
      run: |
        mkdir -p Publish/etc/systemd/system/
        mkdir Publish/DEBIAN
      shell: bash
      working-directory: src/devices/${{inputs.service_name}}

    - name: Create systemd unit
      if: ${{ ( inputs.environment != 'release' || ( inputs.environment == 'release' && inputs.is_hotfix == 'true')) }}
      run: |
        cat << EOF > Publish/etc/systemd/system/${{ inputs.service_name }}.service
        [Unit]
        Description=Hector ${{ inputs.service_name }}
        After=network-online.target
        Requires=network-online.target

        [Service]
        WorkingDirectory=/opt/hector/${{ inputs.service_name }}
        ExecStart=/opt/hector/${{ inputs.service_name }}/${{ inputs.service_name }}
        TimeoutStopSec=1
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
      shell: bash
      working-directory: src/devices/${{inputs.service_name}}

    - name: Create postinstall script
      if: ${{ ( inputs.environment != 'release' || ( inputs.environment == 'release' && inputs.is_hotfix == 'true')) }}
      run: |
        cat << EOF > Publish/DEBIAN/postinst
        #!/bin/sh
        systemctl enable ${{ inputs.service_name }}.service --now
        EOF
        chmod 755 Publish/DEBIAN/postinst
      shell: bash
      working-directory: src/devices/${{inputs.service_name}}

    - name: Create preremove script
      if: ${{ ( inputs.environment != 'release' || ( inputs.environment == 'release' && inputs.is_hotfix == 'true')) }}
      run: |
        cat << EOF > Publish/DEBIAN/prerm
        #!/bin/sh
        systemctl disable ${{ inputs.service_name }}.service --now
        EOF
        chmod 755 Publish/DEBIAN/prerm
      shell: bash
      working-directory: src/devices/${{inputs.service_name}}

    - name: Set user and group to root
      if: ${{ ( inputs.environment != 'release' || ( inputs.environment == 'release' && inputs.is_hotfix == 'true')) }}
      run: |
        sudo chown -R root:root Publish
      shell: bash
      working-directory: src/devices/${{inputs.service_name}}

    - name: Build deb package
      if: ${{ ( inputs.environment != 'release' || ( inputs.environment == 'release' && inputs.is_hotfix == 'true')) }}
      id: package
      uses: jiro4989/build-deb-action@v2
      with:
        package: ${{ inputs.service_name }}
        package_root: src/devices/${{inputs.service_name}}/Publish
        maintainer: "Hectors-Welt GmbH"
        version: ${{ inputs.version }}
        arch: "armhf"
        desc: Hector ${{ inputs.service_name }}

    - name: Get package binarys from staging repo
      if: ${{ (inputs.environment == 'release'  &&  inputs.is_hotfix  == 'false') }}
      id: debian_package
      run: |
        curl --fail ${{ inputs.nexus_apt_debian_staging }}pool/x/${{ inputs.service_name }}/${{ inputs.service_name }}_${{inputs.base_version}}.${{inputs.staging_run_number}}_amd64.deb --output ${{ inputs.service_name }}_${{inputs.base_version}}.${{inputs.staging_run_number}}_amd64.deb
      shell: bash

    - name: Package and Publish to Nexus
      run: |
        if [[ "${{ inputs.environment }}" == "release" ]]; then
          if [[ "${{ inputs.environment }}" == "release" && "${{ inputs.is_hotfix }}" == false  ]]; then
            REPO_URL="${{ inputs.nexus_apt_debian }}"
            DEB_FILE="${{ inputs.service_name }}_${{inputs.base_version}}.${{inputs.staging_run_number}}_amd64.deb"
          elif [[ "${{ inputs.environment }}" == "release" && "${{ inputs.is_hotfix }}" == true ]]; then
            REPO_URL="${{ inputs.nexus_apt_debian }}"
            DEB_FILE="${{ steps.package.outputs.file_name }}"
          fi
        elif [[ "${{ inputs.environment }}" == "release" && "${{ inputs.is_hotfix }}" == true ]]; then
          REPO_URL="${{ inputs.nexus_apt_debian }}"
          DEB_FILE="${{ steps.package.outputs.file_name }}"
        elif [[ "${{ inputs.environment }}" == "prerelease" ]]; then
          REPO_URL="${{ inputs.nexus_apt_debian_pre }}"
          DEB_FILE="${{ steps.package.outputs.file_name }}"
        elif [[ "${{ inputs.environment }}" == "staging" ]]; then
          REPO_URL="${{ inputs.nexus_apt_debian_staging }}"
          DEB_FILE="${{ steps.package.outputs.file_name }}"
        fi

        curl --fail -u "${{ inputs.nexus_apt_repo_username }}:${{ inputs.nexus_apt_repo_password }}" \
          -H "Content-Type: multipart/form-data" \
          --data-binary "@$DEB_FILE" \
          "$REPO_URL"
      shell: bash
