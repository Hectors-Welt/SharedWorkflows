name: Build and deploy

on:
  workflow_call:
    secrets:
      hangfireFeedUrl:
        required: true  
      hangfireUsername:
        required: true
      hangfirePassword:
        required: true
      nexusAptRepoUsername:
        required: true
      nexusAptRepoPassword:
        required: true
      nexusAptRepoHost:
        required: true 
      nexusAptRepoPrereleaseHost:
        required: true  
      nexusAptRepoStagingHost: 
        required: true  
      nexusDockerUsername: 
        required: true
      nexusDockerPassword:
        required: true
      nugetGithubHost:
        required: true
      nugetGithubUsername:
        required: true
      nugetGithubPassword:
        required: true
      packageRepoHost: 
        required: true
      packageRepoPassword:
        required: true
      packageRepoUsername:
        required: true
      packageRepoPort:
        required: true
      dockerRepo:
        required: true   
      shouldSkipDocker:
        required: false
      shouldSkipDebian:
        required: false
      shouldSkipZip:
        required: false

jobs:
  check_if_hotfix:
    runs-on: ubuntu-latest
    outputs:
      HOTFIX_STATUS: ${{ steps.hotfix_check.outputs.result }}
    steps:
      - name: If 'v' tag, check if hotfix
        if: startsWith(github.ref, 'refs/tags/v')
        id: hotfix_check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
        
          REPO="${{ github.repository }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"

          IFS='.' read -ra VERSION <<< "$CURRENT_TAG"
          MAJOR=${VERSION[0]#v}
          MINOR=${VERSION[1]}
          PATCH=${VERSION[2]}

          if [ "$PATCH" -gt 0 ]; then
            PATCH=$((PATCH-1))
            HOTFIX_TAG="v$MAJOR.$MINOR.$PATCH"

            TAGS=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/refs/tags)

            if echo $TAGS | jq -e --arg tag "refs/tags/$HOTFIX_TAG" '.[] | select(.ref == $tag)' > /dev/null; then
              echo "HOTFIX_STATUS=success" >> $GITHUB_ENV
              echo "::set-output name=result::true"
            else
              echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
            echo "::set-output name=result::false"            
            fi
          else
            echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
            echo "::set-output name=result::false"
          fi

  check_for_staging_if_v_tag:
    needs: check_if_hotfix
    if: ${{ needs.check_if_hotfix.outputs.HOTFIX_STATUS =='false'}}
    runs-on: ubuntu-latest
    outputs:
      STAGING_RUN_NUMBER: ${{ steps.check_staging_tag.outputs.result }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare environment variables for release
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}) >> $GITHUB_ENV

      - name: If 'v' tag, check if staging tag exists and get run number
        if: startsWith(github.ref, 'refs/tags/v')
        id: check_staging_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_VERSION=${{ env.BASE_VERSION }}
          STAGING_TAG_NAME="staging-$TAG_VERSION"
          REPO=${{ github.repository }}
          API_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/ref/tags/$STAGING_TAG_NAME)
          if [[ $API_RESPONSE == *"ref"* ]]; then
            COMMIT_SHA=$(echo $API_RESPONSE | jq -r '.object.sha')
            echo "commit sha $COMMIT_SHA"
            STAGING_TAG_API_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/tags/$COMMIT_SHA)
            STAGING_COMMIT_SHA=$(echo $STAGING_TAG_API_RESPONSE | jq -r '.object.sha')
            echo "staging commit sha $STAGING_COMMIT_SHA"
            RUN_NUMBER=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/actions/runs | jq -r '[.workflow_runs[] | select(.head_sha == "'$STAGING_COMMIT_SHA'" and .conclusion == "success")] | max_by(.run_number) | .run_number')            
            echo "run number $RUN_NUMBER"
            echo "STAGING_TAG_EXISTS=true" >> $GITHUB_ENV
            echo "STAGING_RUN_NUMBER='$RUN_NUMBER'" >> $GITHUB_ENV
            STAGING_TAG=$(git tag --list 'staging-*' --sort=-v:refname | head -n 1)
            STAGING_TAG_VERSION=${STAGING_TAG#staging-}
            echo "STAGING_TAG_VERSION=$STAGING_TAG_VERSION" >> $GITHUB_ENV
            echo "::set-output name=result::$RUN_NUMBER"
          else
            echo "::set-output name=result::''"
            echo "STAGING_TAG_EXISTS=false" >> $GITHUB_ENV
          fi
          
      # - name: If 'v' tag, compare version to staging version
      #   if: ${{(startsWith(github.ref, 'refs/tags/v') && needs.check_if_hotfix.outputs.HOTFIX_STATUS =='true')}}
      #   run: |
      #     if [ "$BASE_VERSION" != "$STAGING_TAG_VERSION" ]; then
      #       echo "BASE_VERSION ($BASE_VERSION) does not match STAGING_TAG_VERSION ($STAGING_TAG_VERSION). Exiting workflow."
      #       exit 1
      #     else
      #       echo "BASE_VERSION matches STAGING_TAG_VERSION. Continuing workflow."
      #     fi
      #   shell: bash
      
  check_if_commit_is_valid:
    needs: check_if_hotfix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare version variables for prerelease
        if: startsWith(github.ref, 'refs/tags/prerelease-')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $GITHUB_ENV
      - name: Prepare version variables for release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}) >> $GITHUB_ENV
      - name: Prepare version variables for staging
        if: startsWith(github.ref, 'refs/tags/staging-')
        run: |
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}) >> $GITHUB_ENV
      - name: Prepare env variables
        run: |
          echo LATEST_PRERELEASE_VERSION=$(git describe --match "prerelease-*" --abbrev=0 --tags $(git rev-list --tags --max-count=1)| cut -d '-' -f 2)>> $GITHUB_ENV
          echo STAGING_VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}) >> $GITHUB_ENV
          echo CURRENT_COMMIT=$(git rev-parse HEAD) >> $GITHUB_ENV
          echo STAGING_COMMIT=$(git rev-list -n 1 staging-${{ env.VERSION }}) >> $GITHUB_ENV
          
      - name: Check for staging tag
        if: ${{startsWith(github.ref, 'refs/tags/v') && needs.check_if_hotfix.outputs.HOTFIX_STATUS =='false'}}
        id: staging_tag
        run: |
          if git rev-parse "staging-${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "STAGING_TAG_STATUS=success" >> $GITHUB_ENV
          else  
            echo "STAGING_TAG_STATUS=failure" >> $GITHUB_ENV
          fi

      - name: Check for branch
        if: ${{startsWith(github.ref, 'refs/tags/v')  && needs.check_if_hotfix.outputs.HOTFIX_STATUS =='false'}}
        id: branch
        run: |
          if git rev-parse --verify --quiet ${{env.STAGING_COMMIT}}; then
            echo "STATUS=success" >> $GITHUB_ENV
          else  
            echo "STATUS=failure" >> $GITHUB_ENV
          fi
          
      - name: Check previous commit for prerelease tag
        if: ${{startsWith(github.ref, 'refs/tags/staging-') && needs.check_if_hotfix.outputs.HOTFIX_STATUS =='false'}}
        id: check_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          # Get the SHA of the current commit
          CURRENT_SHA="${{ github.sha }}"
          echo "CURRENT_SHA: $CURRENT_SHA"
          # Get the SHA of the previous commit
          PREVIOUS_SHA=$(git rev-parse "$CURRENT_SHA^")
          echo "PREVIOUS_SHA: $PREVIOUS_SHA"

          TAG_INFO=$(curl -H "Authorization: token $GITHUB_TOKEN" -s https://api.github.com/repos/$REPO/git/refs/tags/prerelease-$STAGING_VERSION)
          
          URL=$(echo "$TAG_INFO" | jq -r '.object.url')
          
          COMMIT_INFO=$(curl -H "Authorization: token $GITHUB_TOKEN" -s "$URL")          
          SHA=$(echo "$COMMIT_INFO" | jq -r '.object.sha')
          echo "TAG=$SHA" >> $GITHUB_ENV

  
      - name: Check for commit
        if: ${{startsWith(github.ref, 'refs/tags/v')  && needs.check_if_hotfix.outputs.HOTFIX_STATUS =='false'}}
        id: commit
        run: |
          PREVIOUS_COMMIT=$(git rev-parse "${{ env.CURRENT_COMMIT }}^2")
          echo "Previous Commit: $PREVIOUS_COMMIT"
          if [ "$PREVIOUS_COMMIT" == "${{ env.STAGING_COMMIT }}" ]; then
            echo "TAG_STATUS=success" >> $GITHUB_ENV
          else
            echo "TAG_STATUS=failure" >> $GITHUB_ENV
          fi

      - name: Check for conditioning tag
        if: startsWith(github.ref, 'refs/tags/staging-')
        id: conditioning_tag
        run: |
          if [ "${{ env.LATEST_PRERELEASE_VERSION }}" == "${{ env.STAGING_VERSION }}" ]; then
            echo "TAG_STATUS=success" >> $GITHUB_ENV
          else  
            echo "TAG_STATUS=failure" >> $GITHUB_ENV
          fi
  
      - name: Check versions
        if:  startsWith(github.ref, 'refs/tags/staging-')
        run: |
         if [ env.TAG_STATUS == 'failure' ]; then
            echo "There was no prerelease tag found with the same version as the staging tag."
            exit 1
         elif [ env.TAG == '' ]; then
           echo "There previous commit has not the correct prerelease tag."
           exit 1
         else  
           echo "Check for tag and commit was successful."
         fi  

      - name: Check versions
        if: ${{(env.TAG_STATUS == 'failure' || env.STATUS == 'failure') && startsWith(github.ref, 'refs/tags/v')  && needs.check_if_hotfix.outputs.HOTFIX_STATUS =='false'}}
        run: |
          if [ env.STATUS == 'failure' ]; then
            echo "There was no commit found with the same version and staging tag on this branch."
          else  
            echo "There was a commit found with the same version "
          fi
          exit 1
          
  check_runtime:
    needs: check_if_commit_is_valid
    if: |
      always() &&
      (needs.check_if_commit_is_valid.result == 'success' || needs.check_if_commit_is_valid.result == 'skipped') 
    runs-on: ubuntu-latest
    outputs:
        runtime: ${{ steps.check_file.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Check if file was created
        id: check_file
        run: | 
          if [ -f package.json ]; then
            echo "::set-output name=result::node"
            echo node
          else
            echo "::set-output name=result::dotnet"
            echo dotnet
          fi        
          
  dotnet:
    uses: Hectors-Welt/SharedWorkflows/.github/workflows/build_and_deploy_dotnet.yml@main
    needs: [check_runtime, check_if_hotfix,check_for_staging_if_v_tag]
    if: needs.check_runtime.outputs.runtime == 'dotnet'
    secrets:
      nexusAptRepoUsername: ${{ secrets.nexusAptRepoUsername }}
      nexusAptRepoPassword: ${{ secrets.nexusAptRepoPassword }}
      nexusAptRepoPrereleaseHost: ${{ secrets.nexusAptRepoPrereleaseHost }}
      nexusAptRepoStagingHost: ${{ secrets.nexusAptRepoStagingHost }}
      nexusAptRepoHost: ${{ secrets.nexusAptRepoHost}}
      hangfireFeedUrl: ${{ secrets.hangfireFeedUrl }}
      hangfireUsername: ${{ secrets.hangfireUsername }}
      hangfirePassword: ${{ secrets.hangfirePassword }}
      nugetGithubHost: ${{ secrets.nugetGithubHost }}
      nugetGithubUsername: ${{ secrets.nugetGithubUsername }}
      nugetGithubPassword: ${{ secrets.nugetGithubPassword }}
      packageRepoHost: ${{ secrets.packageRepoHost }}
      packageRepoPassword: ${{ secrets.packageRepoPassword }}
      packageRepoUsername: ${{ secrets.packageRepoUsername }}
      packageRepoPort: ${{ secrets.packageRepoPort }}
      dockerRepo: ${{ secrets.dockerRepo }}
      nexusDockerUsername: ${{ secrets.nexusDockerUsername }}
      nexusDockerPassword: ${{ secrets.nexusDockerPassword }}
      stagingRunNumber: ${{ needs.check_for_staging_if_v_tag.outputs.STAGING_RUN_NUMBER }}    
      shouldSkipDocker: ${{ secrets.shouldSkipDocker }}
      shouldSkipDebian: ${{ secrets.shouldSkipDebian }}
      shouldSkipZip: ${{ secrets.shouldSkipZip }}
      isHotfix: ${{ needs.check_if_hotfix.outputs.HOTFIX_STATUS }}

  node:
    uses: Hectors-Welt/SharedWorkflows/.github/workflows/build_and_deploy_node.yml@main
    needs: [check_runtime, check_if_hotfix, check_for_staging_if_v_tag]
    if: needs.check_runtime.outputs.runtime == 'node'
    secrets:
      nexusAptRepoUsername: ${{ secrets.nexusAptRepoUsername }}
      nexusAptRepoPassword: ${{ secrets.nexusAptRepoPassword }}
      nexusAptRepoPrereleaseHost: ${{ secrets.nexusAptRepoPrereleaseHost }}
      nexusAptRepoStagingHost: ${{ secrets.nexusAptRepoStagingHost }}
      nexusAptRepoHost: ${{ secrets.nexusAptRepoHost}}
      hangfireFeedUrl: ${{ secrets.hangfireFeedUrl }}
      hangfireUsername: ${{ secrets.hangfireUsername }}
      hangfirePassword: ${{ secrets.hangfirePassword }}
      nugetGithubHost: ${{ secrets.nugetGithubHost }}
      nugetGithubUsername: ${{ secrets.nugetGithubUsername }}
      nugetGithubPassword: ${{ secrets.nugetGithubPassword }}
      packageRepoHost: ${{ secrets.packageRepoHost }}
      packageRepoPassword: ${{ secrets.packageRepoPassword }}
      packageRepoUsername: ${{ secrets.packageRepoUsername }}
      packageRepoPort: ${{ secrets.packageRepoPort }}
      dockerRepo: ${{ secrets.dockerRepo }}
      nexusDockerUsername: ${{ secrets.nexusDockerUsername }}
      nexusDockerPassword: ${{ secrets.nexusDockerPassword }}
      stagingRunNumber: ${{ needs.check_for_staging_if_v_tag.outputs.STAGING_RUN_NUMBER }}
      shouldSkipDocker: ${{ secrets.shouldSkipDocker }}
      shouldSkipDebian: ${{ secrets.shouldSkipDebian }}
      shouldSkipZip: ${{ secrets.shouldSkipZip }}
      isHotfix: ${{ needs.check_if_hotfix.outputs.HOTFIX_STATUS }}


        

