name: build and publish zip

on:
  workflow_call:
    secrets:
      packageRepoHost: 
        required: true
      packageRepoPassword:
        required: true
      packageRepoUsername:
        required: true
      packageRepoPort:
        required: true
      nodeVersion:
        required: true

jobs:     
  build_zip:
    runs-on: windows-latest
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Setup Node.js
      if: ${{ secrets.nodeVersion != null && secrets.nodeVersion != '' }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ secrets.nodeVersion }}.x
        
    - name: Setup Node.js
      if: ${{ secrets.nodeVersion == null || secrets.nodeVersion == '' }}
      uses: actions/setup-node@v2
      with:
        node-version: 18.x
        
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        chcp 65001 #set code page to utf-8
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/v")  >> $env:GITHUB_ENV
  
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/staging-')
      run: |
        chcp 65001 #set code page to utf-8
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/staging-")  >> $env:GITHUB_ENV
        
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/prerelease-')
      run: |
        chcp 65001 #set code page to utf-8
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/prerelease-")  >> $env:GITHUB_ENV
    
    - name: Prepare global environment variables
      run: |
        chcp 65001 #set code page to utf-8
        echo RUN_NUMBER=$(echo ${{github.run_number}}) >> $env:GITHUB_ENV
        echo TAG_NAME=$(echo ${{github.ref_name}}) >> $env:GITHUB_ENV
        echo NAME=$(echo ClubAppService) >> $env:GITHUB_ENV
        NAME=$(jq -r .serviceName package.json)
        echo "NAME=$NAME" >> $GITHUB_ENV
        SERVICE_VERSION=$(jq -r .serviceVersion package.json)
        echo "SERVICE_VERSION=$SERVICE_VERSION" >> $GITHUB_ENV

    - name: Check if hotfix
      if: startsWith(github.ref, 'refs/tags/v')
      id: hotfix_check
      run: |
        # Get the latest version with the prefix "v"
        LATEST_VERSION=$(git tag | grep "^v" | sort -V | tail -n 1 | cut -d 'v' -f 2)
    
        # Get the current version (remove the "v" prefix)
        CURRENT_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/})
    
        # Get the patch versions
        LATEST_PATCH_VERSION=$(echo $LATEST_VERSION | cut -d '.' -f 3)
        CURRENT_PATCH_VERSION=$(echo $CURRENT_VERSION | cut -d '.' -f 3)
    
        # Check if the current patch version is one higher than the latest patch version
        if [[ $((CURRENT_PATCH_VERSION)) == $((LATEST_PATCH_VERSION + 1)) ]]; then
          echo "HOTFIX_STATUS=success" >> $GITHUB_ENV
        else
          echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
        fi  
    
    - name: Build service
      if: ${{!startsWith(github.ref, 'refs/tags/v')}} || ${{startsWith(github.ref, 'refs/tags/v')}} && ${{env.HOTFIX_STATUS =='success'}}
      run: |
        npm install
        (Get-Content package.json) -replace '${{env.SERVICE_VERSION}}','${{env.VERSION}}.${{env.RUN_NUMBER}}' | Set-Content package.json
        npm run build
        npm run package
        
    - name: Zip build results
      if: ${{!startsWith(github.ref, 'refs/tags/v')}} || ${{startsWith(github.ref, 'refs/tags/v')}} && ${{env.HOTFIX_STATUS =='success'}}
      working-directory: ./build
      run: Compress-Archive -Path ./*  -DestinationPath ./${{env.NAME}}-${{env.VERSION}}.${{env.RUN_NUMBER}}.zip
   
    - name: Upload zip
      if: ${{!startsWith(github.ref, 'refs/tags/v')}} || ${{startsWith(github.ref, 'refs/tags/v')}} && ${{env.HOTFIX_STATUS =='success'}}
      uses: actions/upload-artifact@v3
      with:
        name: project-zip
        path: build/${{env.NAME}}-${{env.VERSION}}.${{env.RUN_NUMBER}}.zip
        retention-days: 1
          
  publish_zip:
    needs: build_zip
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ secrets.dotnetVersion }}.x
        
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        chcp 65001 #set code page to utf-8
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/v")  >> $env:GITHUB_ENV
  
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/staging-')
      run: |
        chcp 65001 #set code page to utf-8
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/staging-")  >> $env:GITHUB_ENV
        
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/prerelease-')
      run: |
        chcp 65001 #set code page to utf-8
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/prerelease-")  >> $env:GITHUB_ENV
    
    - name: Prepare global environment variables
      run: |
        chcp 65001 #set code page to utf-8
        echo RUN_NUMBER=$(echo ${{github.run_number}}) >> $env:GITHUB_ENV
        echo TAG_NAME=$(echo ${{github.ref_name}}) >> $env:GITHUB_ENV
        echo NAME=$(echo ClubAppService) >> $env:GITHUB_ENV
        NAME=$(jq -r .serviceName package.json)
        echo "NAME=$NAME" >> $GITHUB_ENV
        SERVICE_VERSION=$(jq -r .serviceVersion package.json)
        echo "SERVICE_VERSION=$SERVICE_VERSION" >> $GITHUB_ENV


    - name: Check if staging tag exists and get run number
      if: startsWith(github.ref, 'refs/tags/v')
      id: check_staging_tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_VERSION=${{ env.BASE_VERSION }}
        STAGING_TAG_NAME="staging-$TAG_VERSION"
        REPO=${{ github.repository }}
        API_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/ref/tags/$STAGING_TAG_NAME)
        if [[ $API_RESPONSE == *"ref"* ]]; then
          COMMIT_SHA=$(echo $API_RESPONSE | jq -r '.object.sha')
          RUN_NUMBER=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/actions/runs | jq -r '[.workflow_runs[] | select(.head_sha == "'$COMMIT_SHA'" and .conclusion == "success")] | max_by(.run_number) | .run_number')            
          echo "STAGING_TAG_EXISTS=true" >> $GITHUB_ENV
          echo "STAGING_RUN_NUMBER='$RUN_NUMBER'" >> $GITHUB_ENV
        else
          echo "STAGING_TAG_EXISTS=false" >> $GITHUB_ENV
        fi
        
    - name: Check if hotfix
      if: startsWith(github.ref, 'refs/tags/v')
      id: hotfix_check
      run: |
        # Get the latest version with the prefix "v"
        LATEST_VERSION=$(git tag | grep "^v" | sort -V | tail -n 1 | cut -d 'v' -f 2)
    
        # Get the current version (remove the "v" prefix)
        CURRENT_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/})
    
        # Get the patch versions
        LATEST_PATCH_VERSION=$(echo $LATEST_VERSION | cut -d '.' -f 3)
        CURRENT_PATCH_VERSION=$(echo $CURRENT_VERSION | cut -d '.' -f 3)
    
        # Check if the current patch version is one higher than the latest patch version
        if [[ $((CURRENT_PATCH_VERSION)) == $((LATEST_PATCH_VERSION + 1)) ]]; then
          echo "HOTFIX_STATUS=success" >> $GITHUB_ENV
        else
          echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
        fi  
        
    - name: Download a single artifact
      if: ${{!startsWith(github.ref, 'refs/tags/v')}} || ${{startsWith(github.ref, 'refs/tags/v')}} && ${{env.HOTFIX_STATUS =='success'}}
      uses: actions/download-artifact@v3
      with:
        name: project-zip
            
    - name: Zip build results
      if: startsWith(github.ref, 'refs/tags/v') &&  ${{env.HOTFIX_STATUS =='failure'}}
      run: |
         ENV_VAR_CLEAN=$(echo ${{env.STAGING_RUN_NUMBER}} | tr -d "'")
         echo $ENV_VAR_CLEAN
         curl -u "${{ secrets.packageRepoUsername }}:${{ secrets.packageRepoPassword }}" ${{ secrets.packageRepoHost }}/${{env.NAME}}/${{env.NAME}}-${{env.VERSION}}.zip --output ${{env.NAME}}-${{ env.BASE_VERSION }}.$ENV_VAR_CLEAN.zip


    - name: copy file via ssh password
      if: startsWith(github.ref, 'refs/tags/staging-')
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.packageRepoHost }}
        username: ${{ secrets.packageRepoUsername }}
        password: ${{ secrets.packageRepoPassword }}
        port: ${{ secrets.packageRepoPort }}
        source: ${{ env.NAME }}-${{ env.VERSION }}.zip
        target: staging/${{ env.NAME }}
        timeout: 300s
        command_timeout: 30m
          
    - name: copy file via ssh password
      if: startsWith(github.ref, 'refs/tags/v')  &&  ${{env.HOTFIX_STATUS =='success'}}
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.packageRepoHost }}
        username: ${{ secrets.packageRepoUsername }}
        password: ${{ secrets.packageRepoPassword }}
        port: ${{ secrets.packageRepoPort }}
        source: ${{ env.NAME }}-${{ env.VERSION }}.zip
        target: release/${{ env.NAME }}
        timeout: 300s
        command_timeout: 30m

    - name: copy file via ssh password
      if: startsWith(github.ref, 'refs/tags/v') &&  ${{env.HOTFIX_STATUS =='failure'}}
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.packageRepoHost }}
        username: ${{ secrets.packageRepoUsername }}
        password: ${{ secrets.packageRepoPassword }}
        port: ${{ secrets.packageRepoPort }}
        source: ./${{ env.NAME}}-${{ env.VERSION }}.zip
        target: release/${{ env.NAME }}
        timeout: 300s
        command_timeout: 30m
          
    - name: copy file via ssh password
      if: startsWith(github.ref, 'refs/tags/prerelease-')
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.packageRepoHost }}
        username: ${{ secrets.packageRepoUsername }}
        password: ${{ secrets.PackageRepoPassword }}
        port: ${{ secrets.packageRepoPort}}
        source: ${{ env.NAME }}-${{ env.VERSION }}.zip
        target: prerelease/${{ env.NAME }}
        timeout: 300s
        command_timeout: 30m
