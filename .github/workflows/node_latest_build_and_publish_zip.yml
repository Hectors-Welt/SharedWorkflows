name: build and publish zip

on:
  workflow_call:
    secrets:
      packageRepoHost: 
        required: true
      packageRepoPassword:
        required: true
      packageRepoUsername:
        required: true
      packageRepoPort:
        required: true
      nexusAptRepoUsername:
        required: true
      nexusAptRepoPassword:
        required: true
      nodeVersion:
        required: true
env:
  SERVICE: ${{ github.event.repository.name }}
  
jobs:     
  build_zip:
    runs-on: windows-latest
    env:
      NODE_VERSION: ${{ secrets.nodeVersion }}    
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Setup Node.js
      if: ${{ env.NODE_VERSION != null && env.NODE_VERSION != '' }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ secrets.nodeVersion }}.x
        
    - name: Setup Node.js
      if: ${{ env.NODE_VERSION == null || env.NODE_VERSION == '' }}
      uses: actions/setup-node@v2
      with:
        node-version: 18.x
        
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        chcp 65001 #set code page to utf-8
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/v")  >> $env:GITHUB_ENV
  
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/staging-')
      run: |
        chcp 65001 #set code page to utf-8
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/staging-")  >> $env:GITHUB_ENV
        
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/prerelease-')
      run: |
        chcp 65001 #set code page to utf-8
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/prerelease-")  >> $env:GITHUB_ENV
    
    - name: Prepare global environment variables
      run: |
        chcp 65001 #set code page to utf-8
        echo RUN_NUMBER=$(echo ${{github.run_number}}) >> $env:GITHUB_ENV
        echo TAG_NAME=$(echo ${{github.ref_name}}) >> $env:GITHUB_ENV
        
    - name: If release, check if hotfix
      if: startsWith(github.ref, 'refs/tags/v')
      id: hotfix_check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
      
        REPO="${{ github.repository }}"
        GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
        CURRENT_TAG="${GITHUB_REF#refs/tags/}"

        IFS='.' read -ra VERSION <<< "$CURRENT_TAG"
        MAJOR=${VERSION[0]#v}
        MINOR=${VERSION[1]}
        PATCH=${VERSION[2]}

        if [ "$PATCH" -gt 0 ]; then
          PATCH=$((PATCH-1))
          HOTFIX_TAG="v$MAJOR.$MINOR.$PATCH"

          TAGS=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/refs/tags)

          if echo $TAGS | jq -e --arg tag "refs/tags/$HOTFIX_TAG" '.[] | select(.ref == $tag)' > /dev/null; then
            echo "HOTFIX_STATUS=success" >> $GITHUB_ENV
          else
            echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
          fi
        else
          echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
        fi
    
    - name: If no 'v' tag, build service
      if: ${{!startsWith(github.ref, 'refs/tags/v')}} 
      run: |
        sed -i '/serviceName/c\"serviceName": "${{env.SERVICE}}",' ./package.json
        sed -i '/serviceVersion/c\"serviceVersion": "${{env.VERSION}}.${{ env.RUN_NUMBER }}",' ./package.json
        npm install
        npm run build
        npm run package
        
    - name: If no 'v' tag, zip build results
      if: ${{!startsWith(github.ref, 'refs/tags/v')}} 
      working-directory: ./build
      run: Compress-Archive -Path ./*  -DestinationPath ./${{env.SERVICE}}-${{env.VERSION}}.${{env.RUN_NUMBER}}.zip
   
    - name: If no 'v' tag, upload zip
      if: ${{!startsWith(github.ref, 'refs/tags/v')}} 
      uses: actions/upload-artifact@v3
      with:
        name: project-zip
        path: build/${{env.SERVICE}}-${{env.VERSION}}.${{env.RUN_NUMBER}}.zip
        retention-days: 1
          
  publish_zip:
    needs: build_zip
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
      with: 
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ secrets.nodeVersion }}.x
        
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/v")  >> $env:GITHUB_ENV
  
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/staging-')
      run: |
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/staging-")  >> $env:GITHUB_ENV
        
    - name: Prepare local environment variables
      if: startsWith(github.ref, 'refs/tags/prerelease-')
      run: |
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $env:GITHUB_ENV
        echo VERSION=$($env:GITHUB_REF -replace "refs/tags/prerelease-")  >> $env:GITHUB_ENV
    
    - name: Prepare global environment variables
      run: |
        echo RUN_NUMBER=$(echo ${{github.run_number}}) >> $env:GITHUB_ENV
        echo TAG_NAME=$(echo ${{github.ref_name}}) >> $env:GITHUB_ENV

    - name: If 'v' tag, check if staging tag exists and get run number
      if: startsWith(github.ref, 'refs/tags/v')
      id: check_staging_tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_VERSION=${{ env.BASE_VERSION }}
        STAGING_TAG_NAME="staging-$TAG_VERSION"
        REPO=${{ github.repository }}
        API_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/ref/tags/$STAGING_TAG_NAME)
        if [[ $API_RESPONSE == *"ref"* ]]; then
          COMMIT_SHA=$(echo $API_RESPONSE | jq -r '.object.sha')
          RUN_NUMBER=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/actions/runs | jq -r '[.workflow_runs[] | select(.head_sha == "'$COMMIT_SHA'" and .conclusion == "success")] | max_by(.run_number) | .run_number')            
          echo "STAGING_TAG_EXISTS=true" >> $GITHUB_ENV
          echo "STAGING_RUN_NUMBER='$RUN_NUMBER'" >> $GITHUB_ENV
          STAGING_TAG=$(git tag --list 'staging-*' --sort=-v:refname | head -n 1)
          STAGING_TAG_VERSION=${STAGING_TAG#staging-}
          echo "STAGING_TAG_VERSION=$STAGING_TAG_VERSION" >> $GITHUB_ENV
        else
          echo "STAGING_TAG_EXISTS=false" >> $GITHUB_ENV
        fi
        
    - name: If 'v' tag, check if hotfix
      if: startsWith(github.ref, 'refs/tags/v')
      id: hotfix_check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
      
        REPO="${{ github.repository }}"
        GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
        CURRENT_TAG="${GITHUB_REF#refs/tags/}"

        IFS='.' read -ra VERSION <<< "$CURRENT_TAG"
        MAJOR=${VERSION[0]#v}
        MINOR=${VERSION[1]}
        PATCH=${VERSION[2]}

        if [ "$PATCH" -gt 0 ]; then
          PATCH=$((PATCH-1))
          HOTFIX_TAG="v$MAJOR.$MINOR.$PATCH"

          TAGS=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/refs/tags)

          if echo $TAGS | jq -e --arg tag "refs/tags/$HOTFIX_TAG" '.[] | select(.ref == $tag)' > /dev/null; then
            echo "HOTFIX_STATUS=success" >> $GITHUB_ENV
          else
            echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
          fi
        else
          echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
        fi
        
    - name: If 'v' tag, compare version to staging version
      if: ${{(startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success')}}
      run: |
        if [ "$BASE_VERSION" != "$STAGING_TAG_VERSION" ]; then
          echo "BASE_VERSION ($BASE_VERSION) does not match STAGING_TAG_VERSION ($STAGING_TAG_VERSION). Exiting workflow."
          exit 1
        else
          echo "BASE_VERSION matches STAGING_TAG_VERSION. Continuing workflow."
        fi
      shell: bash
  
    - name: If 'v' tag, Download a single artifact
      if: ${{!startsWith(github.ref, 'refs/tags/v')}}
      uses: actions/download-artifact@v3
      with:
        name: project-zip
            
    - name: If 'v' tag, get zip
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
         ENV_VAR_CLEAN=$(echo ${{env.STAGING_RUN_NUMBER}} | tr -d "'")
         echo $ENV_VAR_CLEAN
         curl -u "${{ secrets.packageRepoUsername }}:${{ secrets.packageRepoPassword }}" ${{ secrets.packageRepoHost }}/${{env.SERVICE}}/${{env.SERVICE}}-${{env.VERSION}}.zip --output ${{env.SERVICE}}-${{ env.BASE_VERSION }}.$ENV_VAR_CLEAN.zip

    - name: Publish zip to nexus prerelease repo
      if: startsWith(github.ref, 'refs/tags/prerelease-')
      run:  curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" --upload-file ${{ env.SERVICE}}-${{ env.VERSION }}.zip https://nexus.hectorts.de/repository/windows-pre/${{ env.SERVICE}}-${{ env.VERSION }}.zip

    - name: Publish zip to nexus release repo
      if: startsWith(github.ref, 'refs/tags/v')
      run:  curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" --upload-file ${{ env.SERVICE}}-${{ env.BASE_VERSION }}.${{env.ENV_VAR_CLEAN}}.zip https://nexus.hectorts.de/repository/windows/${{ env.NAME}}-${{ env.BASE_VERSION }}.${{env.ENV_VAR_CLEAN}}.zip

    - name: Publish zip to nexus staging repo
      if: startsWith(github.ref, 'refs/tags/staging-')
      run:  curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" --upload-file ${{ env.SERVICE}}-${{ env.VERSION }}.zip https://nexus.hectorts.de/repository/windows-stg/${{ env.SERVICE}}-${{ env.VERSION }}.zip

    - name: copy file via ssh password
      if: startsWith(github.ref, 'refs/tags/staging-')
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.packageRepoHost }}
        username: ${{ secrets.packageRepoUsername }}
        password: ${{ secrets.packageRepoPassword }}
        port: ${{ secrets.packageRepoPort }}
        source: ${{ env.SERVICE }}-${{ env.VERSION }}.zip
        target: staging/${{ env.NAME }}
        timeout: 300s
        command_timeout: 30m

    - name: copy file via ssh password
      if: startsWith(github.ref, 'refs/tags/v')
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.packageRepoHost }}
        username: ${{ secrets.packageRepoUsername }}
        password: ${{ secrets.packageRepoPassword }}
        port: ${{ secrets.packageRepoPort }}
        source: ./${{ env.SERVICE}}-${{ env.BASE_VERSION }}.${{env.ENV_VAR_CLEAN}}.zip
        target: release/${{ env.NAME }}
        timeout: 300s
        command_timeout: 30m
          
    - name: copy file via ssh password
      if: startsWith(github.ref, 'refs/tags/prerelease-')
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.packageRepoHost }}
        username: ${{ secrets.packageRepoUsername }}
        password: ${{ secrets.PackageRepoPassword }}
        port: ${{ secrets.packageRepoPort}}
        source: ${{ env.SERVICE }}-${{ env.VERSION }}.zip
        target: prerelease/${{ env.NAME }}
        timeout: 300s
        command_timeout: 30m
