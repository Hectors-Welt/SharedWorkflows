name: Create v6 prerelease

on:
  workflow_call:
    secrets:
      hangfireFeedUrl:
        required: true  
      hangfireUsername:
        required: true
      hangfirePassword:
        required: true
      nugetGithubHost:
        required: true
      nugetGithubUsername:
        required: true
      nugetGithubPassword:
        required: true
      githubToken:
        required: true
      dockerRepo:
        required: true

 
env:
  SERVICE: ${{ github.event.repository.name }}
  REGISTRY: ${{ secrets.dockerRepo }}

jobs:
  build_and_push_docker_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:   
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.nexusDockerUsername }}
        password: ${{ secrets.nexusDockerPassword }}

    - name: create docker file
      working-directory: ./src
      run: | 
        cat <<EOF >Dockerfile
        FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base
        WORKDIR /app
        EXPOSE 80
        FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
        COPY ./ .
        RUN ls -al
        WORKDIR "/src/."
        RUN dotnet nuget add source ${{ secrets.nugetGithubHost }} --name github --username ${{ secrets.nugetGithubUsername }} --password ${{ secrets.nugetGithubPassword }} --store-password-in-clear-text
        WORKDIR "/src/."
        RUN dotnet nuget add source ${{ secrets.hangfireFeedUrl }} --name hangfirePro --username ${{ secrets.hangfireUsername }} --password ${{ secrets.hangfirePassword }} --store-password-in-clear-text
        WORKDIR "/src/."
        RUN dotnet restore
        WORKDIR "/src/."
        RUN dotnet build "${{ env.SERVICE }}.csproj" -c Release -o /app/build
        FROM build AS publish
        RUN dotnet publish "${{ env.SERVICE }}.csproj" -c Release -o /app/publish
        FROM base AS final
        WORKDIR /app
        COPY --from=publish /app/publish .
        ENTRYPOINT [ "sh", "-c", "dotnet ${{ env.SERVICE }}.dll" ]
        EOF
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v2
      with:
        images: ${{ env.REGISTRY }}/${{ env.SERVICE }}
        flavor: |
          latest=false
        tags: |
          type=ref,event=tag

    - name: Build and push Docker image

      uses: docker/build-push-action@v2
      with:
        context: .
        build-args: |
          SERVICE=${{ env.SERVICE }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: ./src/Dockerfile
