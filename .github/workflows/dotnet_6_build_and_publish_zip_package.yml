name: Create v6 publish zip

on:
  workflow_call:
    secrets:
      packageRepoHost: 
        required: true
      packageRepoPassword:
        required: true
      packageRepoUsername:
        required: true
      packageRepoPort:
        required: true
      hangfireFeedUrl:
        required: true  
      hangfireUsername:
        required: true
      hangfirePassword:
        required: true  
      nugetGithubHost:
        required: true
      nugetGithubUsername:
        required: true
      nugetGithubPassword:
        required: true
 
env:
  SERVICE: ${{ github.event.repository.name }}
        
jobs:
   build_and_publish_zip:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.100

      - name: Prepare environment variables
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV
          
      - name: Prepare environment variables
        if: startsWith(github.ref, 'refs/tags/staging-')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV

      - name: Prepare environment variables
        if: startsWith(github.ref, 'refs/tags/prerelease-')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo RUN_NUMBER=$(echo $GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV
     
      - name: Check if staging tag exists and get run number
        if: startsWith(github.ref, 'refs/tags/v')
        id: check_staging_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_VERSION=${{ env.BASE_VERSION }}
          STAGING_TAG_NAME="staging-$TAG_VERSION"
          REPO=${{ github.repository }}
          API_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/ref/tags/$STAGING_TAG_NAME)
          if [[ $API_RESPONSE == *"ref"* ]]; then
            COMMIT_SHA=$(echo $API_RESPONSE | jq -r '.object.sha')
            RUN_NUMBER=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/actions/runs | jq -r '.workflow_runs[] | select(.head_sha == "'$COMMIT_SHA'") | .run_number')
            echo "STAGING_TAG_EXISTS=true" >> $GITHUB_ENV
            RUN_NUMBER=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/actions/runs | jq -r '[.workflow_runs[] | select(.head_sha == "'$COMMIT_SHA'" and .conclusion == "success")] | max_by(.run_number) | .run_number')            echo "STAGING_TAG_EXISTS=true" >> $GITHUB_ENV
            echo "STAGING_RUN_NUMBER='$RUN_NUMBER'" >> $GITHUB_ENV
          else
            echo "STAGING_TAG_EXISTS=false" >> $GITHUB_ENV
          fi
          
      - name: Check if hotfix
        if: startsWith(github.ref, 'refs/tags/v')
        id: hotfix_check
        run: |
          # Get the latest version with the prefix "v"
          LATEST_VERSION=$(git tag | grep "^v" | sort -V | tail -n 1 | cut -d 'v' -f 2)
      
          # Get the current version (remove the "v" prefix)
          CURRENT_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/})
      
          # Get the patch versions
          LATEST_PATCH_VERSION=$(echo $LATEST_VERSION | cut -d '.' -f 3)
          CURRENT_PATCH_VERSION=$(echo $CURRENT_VERSION | cut -d '.' -f 3)
      
          # Check if the current patch version is one higher than the latest patch version
          if [[ $((CURRENT_PATCH_VERSION)) == $((LATEST_PATCH_VERSION + 1)) ]]; then
            echo "HOTFIX_STATUS=success" >> $GITHUB_ENV
          else
            echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
          fi  
          
      - name: add feeds
        run: |
          dotnet nuget add source ${{ secrets.nugetGithubHost }} --name github --username ${{ secrets.nugetGithubUsername }} --password ${{ secrets.nugetGithubPassword }} --store-password-in-clear-text
          dotnet nuget add source ${{ secrets.hangfireFeedUrl }} --name hangfirePro --username ${{ secrets.hangfireUsername }} --password ${{ secrets.hangfirePassword }} --store-password-in-clear-text
          dotnet restore
      
      - name: Build
        if: ${{!startsWith(github.ref, 'refs/tags/v') || ( startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success')}}  
        run: 'dotnet publish ${{env.NAME}}.csproj --configuration Release --output Publish -r win-x64 --self-contained true /p:AssemblyVersion=${{ env.VERSION }} /p:FileVersion=${{ env.VERSION }}'
     
      - name: Zip build results
        if: ${{!startsWith(github.ref, 'refs/tags/v') || ( startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success')}}  
        run: cd ./Publish; zip -r ${{ env.NAME}}-${{ env.VERSION }}.zip .

      - name: Zip build results
        if:  ${{ startsWith(github.ref, 'refs/tags/v') &&  env.HOTFIX_STATUS =='failure'}}
        run: |
           curl -u "${{ secrets.packageRepoUsername }}:${{ secrets.packageRepoPassword }}" ${{ secrets.packageRepoHost }}/${{env.NAME}}/${{env.NAME}}-${{ env.BASE_VERSION }}.${{env.STAGING_RUN_NUMBER}}.zip --output ${{env.NAME}}-${{env.VERSION}}.zip

      - name: copy file via ssh password
        if: startsWith(github.ref, 'refs/tags/staging-')
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.packageRepoHost }}
          username: ${{ secrets.packageRepoUsername }}
          password: ${{ secrets.packageRepoPassword }}
          port: ${{ secrets.packageRepoPort }}
          source: ./src/Publish/${{ env.NAME}}-${{ env.VERSION }}.zip
          target: staging/${{ env.NAME }}
          strip_components: 3

      - name: copy file via ssh password
        if:  ${{ startsWith(github.ref, 'refs/tags/v')  &&  env.HOTFIX_STATUS =='success'}}
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.packageRepoHost }}
          username: ${{ secrets.packageRepoUsername }}
          password: ${{ secrets.packageRepoPassword }}
          port: ${{ secrets.packageRepoPort }}
          source: ./src/Publish/${{ env.NAME}}-${{ env.VERSION }}.zip
          target: release/${{ env.NAME }}
          strip_components: 3

      - name: copy file via ssh password
        if:   ${{ startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='failure'}}
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.packageRepoHost }}
          username: ${{ secrets.packageRepoUsername }}
          password: ${{ secrets.packageRepoPassword }}
          port: ${{ secrets.packageRepoPort }}
          source: ./${{ env.NAME}}-${{ env.VERSION }}.zip
          target: release/${{ env.NAME }}
          strip_components: 3
          
      - name: copy file via ssh password
        if: startsWith(github.ref, 'refs/tags/prerelease-')
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.packageRepoHost }}
          username: ${{ secrets.packageRepoUsername }}
          password: ${{ secrets.PackageRepoPassword }}
          port: ${{ secrets.packageRepoPort}}
          source: ./src/Publish/${{ env.NAME}}-${{ env.VERSION }}.zip
          target: prerelease/${{ env.NAME }}
          strip_components: 3
