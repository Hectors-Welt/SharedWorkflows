name: Create v6 prerelease

on:
  workflow_call:
    secrets:
      dockerRepo:
        required: true
      packageRepoHost: 
        required: true
      packageRepoPassword:
        required: true
      packageRepoUsername:
        required: true
      packageRepoPort:
        required: true
      nexusDockerUsername:
        required: true
      nexusDockerPassword:
        required: true
      nexusAptRepoUsername:
        required: true
      nexusAptRepoPassword:
        required: true
      nexusAptRepoHost:
        required: true
      chocoRepo:
        required: true
      chocoApiKey:
        required: true
      hangfireFeedUrl:
        required: true  
      hangfireUsername:
        required: true
      hangfirePassword:
        required: true
      nugetGithubHost:
        required: true
      nugetGithubUsername:
        required: true
      nugetGithubPassword:
        required: true
 
      
env:
  REGISTRY: ${{ secrets.dockerRepo }}
  SERVICE: ${{ github.event.repository.name }} 
        
jobs:
  build_and_publish_zip:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.100

    - name: Prepare environment variables
      run: |
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $GITHUB_ENV
        echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
        echo RUN_NUMBER=$(echo $GITHUB_RUN_NUMBER) >> $GITHUB_ENV
        echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
        echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV

        
    - name: add feeds
      run: |
        dotnet nuget add source ${{ secrets.nugetGithubHost }} --name github --username ${{ secrets.nugetGithubUsername }} --password ${{ secrets.nugetGithubPassword }} --store-password-in-clear-text
        dotnet nuget add source ${{ secrets.hangfireFeedUrl }} --name hangfirePro --username ${{ secrets.hangfireUsername }} --password ${{ secrets.hangfirePassword }} --store-password-in-clear-text
        dotnet restore
                
    - name: Build
      run: 'dotnet publish ${{env.NAME}}.csproj --configuration Release --output Publish -r win-x64 --self-contained true /p:AssemblyVersion=${{ env.VERSION }} /p:FileVersion=${{ env.VERSION }}'

    - name: Zip build results
      run: cd ./Publish; zip -r ${{ env.NAME}}-${{ env.VERSION }}.zip .   

    - name: copy file via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.packageRepoHost }}
        username: ${{ secrets.packageRepoUsername }}
        password: ${{ secrets.PackageRepoPassword }}
        port: ${{ secrets.packageRepoPort}}
        source: ./src/Publish/${{ env.NAME}}-${{ env.VERSION }}.zip
        target: prerelease/${{ env.NAME }}
        strip_components: 3
  
  build_and_publish_deb:

    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100

      - name: Prepare environment variables
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo RUN_NUMBER=$(echo $GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV
          echo "SERVICENAME_LOWERCASE=${$NAME,,}" >>${GITHUB_ENV}
         
      - name: debug servicename lowercase
        run: echo "${{env.SERVICENAME_LOWERCASE}}"
      - name: add feeds
        run: |
          dotnet nuget add source ${{ secrets.nugetGithubHost }} --name github --username ${{ secrets.nugetGithubUsername }} --password ${{ secrets.nugetGithubPassword }} --store-password-in-clear-text
          dotnet nuget add source ${{ secrets.hangfireFeedUrl }} --name hangfirePro --username ${{ secrets.hangfireUsername }} --password ${{ secrets.hangfirePassword }} --store-password-in-clear-text
          dotnet restore
          
      - name: Build service
        run: 'dotnet publish ./src/${{ env.NAME }}.csproj --configuration Release --output Publish/opt/hector/${{ env.NAME }} -r linux-x64 --self-contained true /p:AssemblyVersion=${{ env.VERSION }} /p:FileVersion=${{ env.VERSION }}'

      - name: Create unit file path
        run: mkdir -p Publish/etc/systemd/system/

      - name: Build unit file
        run: |
          cat << EOF > Publish/etc/systemd/system/${{ env.SERVICENAME_LOWERCASE }}.service
          [Unit]
          Description=Hector ${{ env.NAME }}
          After=network-online.target
          Requires=network-online.target
          
          [Service]
          EnvironmentFile=/etc/serviceEnvironment
          WorkingDirectory=/opt/hector/${{ env.NAME }}
          ExecStart=/opt/hector/${{ env.NAME }}/${{ env.NAME }}
          TimeoutStopSec=1
          Restart=always
          RestartSec=5
          
          [Install]
          WantedBy=multi-user.target
          
          EOF
          
      - name: Create postinstall script
        run: |
          mkdir -p Publish/DEBIAN
          cat << EOF > Publish/DEBIAN/postinst
          #!/bin/sh
          # stop service
          service ${{ env.SERVICENAME_LOWERCASE }} stop
          systemctl disable $${{ env.SERVICENAME_LOWERCASE }}.service
          
          # setup service
          systemctl daemon-reload
          systemctl enable ${{ env.SERVICENAME_LOWERCASE }}.service
          service ${{ env.SERVICENAME_LOWERCASE }} start
          EOF
          chmod 755 Publish/DEBIAN/postinst
          
      - name: build-deb-action
        id: package
        uses: jiro4989/build-deb-action@v2
        with:
          # Package name of debian package.
          package: ${{ env.NAME }}
          # Directory of release files.
          package_root: ./Publish
          # Package maintainer name.
          maintainer: "Hectors-Welt GmbH"
          # Package version.
          version: ${{ env.VERSION }}
          # Package architecture.
          arch: all

      - name: push deb package to nexus apt repo
        run: |
          curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" -H "Content-Type: multipart/form-data" --data-binary "@${{steps.package.outputs.file_name}}" "${{ secrets.nexusAptRepoHost  }}"
