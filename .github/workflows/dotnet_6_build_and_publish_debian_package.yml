name: Create v6 publish deb

on:
  workflow_call:
    secrets:
      hangfireFeedUrl:
        required: true  
      hangfireUsername:
        required: true
      hangfirePassword:
        required: true
      nexusAptRepoUsername:
        required: true
      nexusAptRepoPassword:
        required: true
      nexusAptRepoHost:
        required: true 
      nexusAptRepoPrereleaseHost:
        required: true  
      nugetGithubHost:
        required: true
      nugetGithubUsername:
        required: true
      nugetGithubPassword:
        required: true
      nexusAptRepoStagingHost:
        required: true
      dotnetVersion:
        required: true
      stagingRunNumber:
        required: true
env:
  SERVICE: ${{ github.event.repository.name }}
        
jobs:
  build_and_publish_deb:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ secrets.dotnetVersion }}.x
          
      - name: Prepare environment variables for release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV

      - name: Prepare environment variables for staging
        if: startsWith(github.ref, 'refs/tags/staging-')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV
          
      - name: Prepare environment variables for prerelease
        if: startsWith(github.ref, 'refs/tags/prerelease-')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo RUN_NUMBER=$(echo $GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV
        
      - name: If no 'v' tag, add feeds
        if: ${{!startsWith(github.ref, 'refs/tags/v')}}
        run: |
          dotnet nuget add source ${{ secrets.nugetGithubHost }} --name github --username ${{ secrets.nugetGithubUsername }} --password ${{ secrets.nugetGithubPassword }} --store-password-in-clear-text
          dotnet nuget add source ${{ secrets.hangfireFeedUrl }} --name hangfirePro --username ${{ secrets.hangfireUsername }} --password ${{ secrets.hangfirePassword }} --store-password-in-clear-text
          dotnet restore

      - name: If no 'v' tag, publish service
        if: ${{!startsWith(github.ref, 'refs/tags/v')}}
        run: >
          dotnet publish ./src/${{ env.NAME }}.csproj --configuration Release --output Publish/opt/hector/${{ env.NAME }}
          -r linux-x64 --self-contained true /p:AssemblyVersion=${{ env.VERSION }} /p:FileVersion=${{ env.VERSION }}
          
      - name: If no 'v' tag, create file paths
        if: ${{!startsWith(github.ref, 'refs/tags/v')}}
        run: |
          mkdir -p Publish/etc/systemd/system/
          mkdir Publish/DEBIAN
          
      - name: If no 'v' tag, create systemd unit
        if: ${{!startsWith(github.ref, 'refs/tags/v')}}
        run: |
          cat << EOF > Publish/etc/systemd/system/${{ env.NAME }}.service
          [Unit]
          Description=Hector ${{ env.NAME }}
          After=network-online.target
          Requires=network-online.target
          
          [Service]
          EnvironmentFile=/etc/serviceEnvironment
          WorkingDirectory=/opt/hector/${{ env.NAME }}
          ExecStart=/opt/hector/${{ env.NAME }}/${{ env.NAME }}
          TimeoutStopSec=1
          Restart=always
          RestartSec=5
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
      - name: If no 'v' tag, create postinstall script
        if: ${{!startsWith(github.ref, 'refs/tags/v')}}
        run: |
          cat << EOF > Publish/DEBIAN/postinst
          #!/bin/sh
          systemctl enable ${{env.NAME}}.service --now
          EOF
          chmod 755 Publish/DEBIAN/postinst
          
      - name: If no 'v' tag, create preremove script
        if: ${{!startsWith(github.ref, 'refs/tags/v')}}
        run: |
          cat << EOF > Publish/DEBIAN/prerm
          #!/bin/sh
          systemctl disable ${{env.NAME}}.service --now
          EOF
          chmod 755 Publish/DEBIAN/prerm
          
      - name: If no 'v' tag, set user and group to root
        if: ${{!startsWith(github.ref, 'refs/tags/v')}}
        run: |
          sudo chown -R root:root Publish
          
      - name: If no 'v' tag, build deb package
        if: ${{!startsWith(github.ref, 'refs/tags/v')}}
        id: package
        uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.NAME }}
          package_root: Publish
          maintainer: "Hectors-Welt GmbH"
          version: ${{ env.VERSION }}
          arch: "amd64"
          desc: Hector ${{ env.NAME }}

      - name: If 'v' tag, set run number as env variable
        working-directory: ./src
        if:  ${{ startsWith(github.ref, 'refs/tags/v')}}
        run: |
           FIRST_CHAR=`echo ${{env.NAME}} | cut -c1-1`
           echo FIRST_CHAR=$(echo $FIRST_CHAR) >> $GITHUB_ENV
           
      - name: If 'v' tag, get package binarys from repo
        if:  ${{ startsWith(github.ref, 'refs/tags/v')}}
        id: debian_package
        run: |
          curl ${{ secrets.nexusAptRepoStagingHost }}pool/${{env.FIRST_CHAR}}/${{env.NAME}}/${{env.NAME}}_${{env.BASE_VERSION}}.${{secrets.stagingRunNumber}}_amd64.deb --output ${{env.NAME}}_${{env.BASE_VERSION}}.${{secrets.stagingRunNumber}}_amd64.deb 
          
      - name: push deb package to nexus release apt repo 
        if: ${{ startsWith(github.ref, 'refs/tags/v')}}
        run: |
          curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" -H "Content-Type: multipart/form-data" --data-binary "@./${{env.NAME}}_${{env.BASE_VERSION}}.${{secrets.stagingRunNumber}}_amd64.deb" "${{ secrets.nexusAptRepoHost  }}"
      
      - name: push deb package to nexus staging apt repo
        if: startsWith(github.ref, 'refs/tags/staging-')
        run: |
          curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" -H "Content-Type: multipart/form-data" --data-binary "@${{steps.package.outputs.file_name}}" "${{ secrets.nexusAptRepoStagingHost  }}"

      - name: push deb package to nexus prerelease apt repo
        if: startsWith(github.ref, 'refs/tags/prerelease-')
        run: |
          curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" -H "Content-Type: multipart/form-data" --data-binary "@${{steps.package.outputs.file_name}}" "${{ secrets.nexusAptRepoPrereleaseHost  }}"
