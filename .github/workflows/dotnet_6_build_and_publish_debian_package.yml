name: Create v6 publish deb

on:
  workflow_call:
    secrets:
      hangfireFeedUrl:
        required: true  
      hangfireUsername:
        required: true
      hangfirePassword:
        required: true
      nexusAptRepoUsername:
        required: true
      nexusAptRepoPassword:
        required: true
      nexusAptRepoHost:
        required: true 
      nexusAptRepoPrereleaseHost:
        required: true  
      nugetGithubHost:
        required: true
      nugetGithubUsername:
        required: true
      nugetGithubPassword:
        required: true
      nexusAptRepoStagingHost:
        required: true
      dotnetVersion:
        required: true
 
env:
  SERVICE: ${{ github.event.repository.name }}
        
jobs:
  build_and_publish_deb:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ secrets.dotnetVersion }}.x
          
      - name: Prepare environment variables for release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/v/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV

      - name: Prepare environment variables for staging
        if: startsWith(github.ref, 'refs/tags/staging-')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/staging-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV
          
      - name: Prepare environment variables for prerelease
        if: startsWith(github.ref, 'refs/tags/prerelease-')
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo RUN_NUMBER=$(echo $GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV

      - name: If release, check if staging tag exists and get run number
        if: startsWith(github.ref, 'refs/tags/v')
        id: check_staging_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_VERSION=${{ env.BASE_VERSION }}
          STAGING_TAG_NAME="staging-$TAG_VERSION"
          REPO=${{ github.repository }}
          API_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/ref/tags/$STAGING_TAG_NAME)
          echo $API_RESPONSE
          if [[ $API_RESPONSE == *"ref"* ]]; then
            COMMIT_SHA=$(echo $API_RESPONSE | jq -r '.object.sha')
            RUN_NUMBER=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/actions/runs | jq -r '[.workflow_runs[] | select(.head_branch == "'$STAGING_TAG_NAME'" and .conclusion == "success")] | max_by(.run_number) | .run_number')            
            echo "STAGING_TAG_EXISTS=true" >> $GITHUB_ENV
            echo "STAGING_RUN_NUMBER='$RUN_NUMBER'" >> $GITHUB_ENV
            STAGING_TAG=$(git tag --list 'staging-*' --sort=-v:refname | head -n 1)
            STAGING_TAG_VERSION=${STAGING_TAG#staging-}
            echo "STAGING_TAG_VERSION=$STAGING_TAG_VERSION" >> $GITHUB_ENV
          else
            echo "STAGING_TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: If release, check if hotfix
        if: startsWith(github.ref, 'refs/tags/v')
        id: hotfix_check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
        
          REPO="${{ github.repository }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
  
          IFS='.' read -ra VERSION <<< "$CURRENT_TAG"
          MAJOR=${VERSION[0]#v}
          MINOR=${VERSION[1]}
          PATCH=${VERSION[2]}
  
          if [ "$PATCH" -gt 0 ]; then
            PATCH=$((PATCH-1))
            HOTFIX_TAG="v$MAJOR.$MINOR.$PATCH"
  
            TAGS=$(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/git/refs/tags)
  
            if echo $TAGS | jq -e --arg tag "refs/tags/$HOTFIX_TAG" '.[] | select(.ref == $tag)' > /dev/null; then
              echo "HOTFIX_STATUS=success" >> $GITHUB_ENV
            else
              echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
            fi
          else
            echo "HOTFIX_STATUS=failure" >> $GITHUB_ENV
          fi
          
      - name: Compare version to staging version
        if: ${{(startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success')}}
        run: |
          if [ "$BASE_VERSION" != "$STAGING_TAG_VERSION" ]; then
            echo "BASE_VERSION ($BASE_VERSION) does not match STAGING_TAG_VERSION ($STAGING_TAG_VERSION). Exiting workflow."
            exit 1
          else
            echo "BASE_VERSION matches STAGING_TAG_VERSION. Continuing workflow."
          fi
        shell: bash
        
      - name: If no release and no hotfix, add feeds
        if: ${{!startsWith(github.ref, 'refs/tags/v') || ( startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success') }}
        run: |
          dotnet nuget add source ${{ secrets.nugetGithubHost }} --name github --username ${{ secrets.nugetGithubUsername }} --password ${{ secrets.nugetGithubPassword }} --store-password-in-clear-text
          dotnet nuget add source ${{ secrets.hangfireFeedUrl }} --name hangfirePro --username ${{ secrets.hangfireUsername }} --password ${{ secrets.hangfirePassword }} --store-password-in-clear-text
          dotnet restore

      - name: If no release and no hotfix, publish service
        if: ${{!startsWith(github.ref, 'refs/tags/v') || ( startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success') }}
        run: >
          dotnet publish ./src/${{ env.NAME }}.csproj --configuration Release --output Publish/opt/hector/${{ env.NAME }}
          -r linux-x64 --self-contained true /p:AssemblyVersion=${{ env.VERSION }} /p:FileVersion=${{ env.VERSION }}
          
      - name: If no release and no hotfix, create file paths
        if: ${{!startsWith(github.ref, 'refs/tags/v') || ( startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success') }}
        run: |
          mkdir -p Publish/etc/systemd/system/
          mkdir Publish/DEBIAN
          
      - name: If no release and no hotfix, create systemd unit
        if: ${{!startsWith(github.ref, 'refs/tags/v') || (startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success')}}
        run: |
          cat << EOF > Publish/etc/systemd/system/${{ env.NAME }}.service
          [Unit]
          Description=Hector ${{ env.NAME }}
          After=network-online.target
          Requires=network-online.target
          
          [Service]
          EnvironmentFile=/etc/serviceEnvironment
          WorkingDirectory=/opt/hector/${{ env.NAME }}
          ExecStart=/opt/hector/${{ env.NAME }}/${{ env.NAME }}
          TimeoutStopSec=1
          Restart=always
          RestartSec=5
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
      - name: If no release and no hotfix, create postinstall script
        if: ${{!startsWith(github.ref, 'refs/tags/v') || ( startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success') }}
        run: |
          cat << EOF > Publish/DEBIAN/postinst
          #!/bin/sh
          systemctl enable ${{env.NAME}}.service --now
          EOF
          chmod 755 Publish/DEBIAN/postinst
          
      - name: If no release and no hotfix, create preremove script
        if: ${{!startsWith(github.ref, 'refs/tags/v') || ( startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success') }}
        run: |
          cat << EOF > Publish/DEBIAN/prerm
          #!/bin/sh
          systemctl disable ${{env.NAME}}.service --now
          EOF
          chmod 755 Publish/DEBIAN/prerm
          
      - name: If no release and no hotfix, set user and group to root
        if: ${{!startsWith(github.ref, 'refs/tags/v') || ( startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success') }}
        run: |
          sudo chown -R root:root Publish
          
      - name: If prerelease or staging, build deb package
        if: startsWith(github.ref, 'refs/tags/staging-') || startsWith(github.ref, 'refs/tags/prerelease-')
        id: package
        uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.NAME }}
          package_root: Publish
          maintainer: "Hectors-Welt GmbH"
          version: ${{ env.VERSION }}
          arch: "amd64"
          desc: Hector ${{ env.NAME }}

      - name: If hotfix, build deb package
        if:  ${{ startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success' }}
        id: hotfix
        uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.NAME }}
          package_root: Publish
          maintainer: "Hectors-Welt GmbH"
          version: ${{ env.VERSION }}
          arch: "amd64"
          desc: Hector ${{ env.NAME }}

      - name: If release, set run number as env variable
        working-directory: ./src
        if:  ${{ startsWith(github.ref, 'refs/tags/v') &&  env.HOTFIX_STATUS =='failure'}}
        run: |
           ENV_VAR_CLEAN=$(echo ${{env.STAGING_RUN_NUMBER}} | tr -d "'")
           echo ENV_VAR_CLEAN=$(echo $ENV_VAR_CLEAN) >> $GITHUB_ENV
           FIRST_CHAR=`echo ${{env.NAME}} | cut -c1-1`
           echo FIRST_CHAR=$(echo $FIRST_CHAR) >> $GITHUB_ENV
           
      - name: If release, get package binarys from repo
        if:  ${{ startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='failure'}}
        id: debian_package
        run: |
          curl ${{ secrets.nexusAptRepoStagingHost }}pool/${{env.FIRST_CHAR}}/${{env.NAME}}/${{env.NAME}}_${{env.BASE_VERSION}}.${{env.ENV_VAR_CLEAN}}_amd64.deb --output ${{env.NAME}}_${{env.BASE_VERSION}}.${{env.ENV_VAR_CLEAN}}_amd64.deb 
          
      - name: push deb package to nexus release apt repo 
        if: ${{ startsWith(github.ref, 'refs/tags/v') &&  env.HOTFIX_STATUS =='failure'}}
        run: |
          curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" -H "Content-Type: multipart/form-data" --data-binary "@./${{env.NAME}}_${{env.BASE_VERSION}}.${{env.ENV_VAR_CLEAN}}_amd64.deb" "${{ secrets.nexusAptRepoHost  }}"
      
      - name: push deb package to nexus release apt repo
        if: ${{ startsWith(github.ref, 'refs/tags/v') && env.HOTFIX_STATUS =='success'}}
        run: |
          curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" -H "Content-Type: multipart/form-data" --data-binary "@${{steps.hotfix.outputs.file_name}}" "${{ secrets.nexusAptRepoHost  }}"

      - name: push deb package to nexus staging apt repo
        if: startsWith(github.ref, 'refs/tags/staging-')
        run: |
          curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" -H "Content-Type: multipart/form-data" --data-binary "@${{steps.package.outputs.file_name}}" "${{ secrets.nexusAptRepoStagingHost  }}"

      - name: push deb package to nexus prerelease apt repo
        if: startsWith(github.ref, 'refs/tags/prerelease-')
        run: |
          curl -u "${{ secrets.nexusAptRepoUsername }}:${{ secrets.nexusAptRepoPassword }}" -H "Content-Type: multipart/form-data" --data-binary "@${{steps.package.outputs.file_name}}" "${{ secrets.nexusAptRepoPrereleaseHost  }}"
