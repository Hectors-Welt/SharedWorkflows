name: Create v6 prerelease

on:
  workflow_call:
  
  push:
    tags: 
      - prerelease-*
      
env:
  REGISTRY: ${{ secrets.DOCKER_REPO }}
  SERVICE: ${{ github.event.repository.name }} 
        
jobs:
  build_and_publish_zip:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.100

    - name: Prepare environment variables
      run: |
        echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $GITHUB_ENV
        echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
        echo RUN_NUMBER=$(echo $GITHUB_RUN_NUMBER) >> $GITHUB_ENV
        echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
        echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV

    - name: Build
      run: 'dotnet publish --configuration Release --output Publish -r win-x64 --self-contained true /p:AssemblyVersion=${{ env.VERSION }} /p:FileVersion=${{ env.VERSION }}'

    - name: Zip build results
      run: cd ./Publish; zip -r ${{ env.NAME}}-${{ env.VERSION }}.zip .   

    - name: copy file via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PACKAGE_REPO_HOST }}
        username: ${{ secrets.PACKAGE_REPO_USERNAME }}
        password: ${{ secrets.PACKAGE_REPO_PASSWORD }}
        port: ${{ secrets.PACKAGE_REPO_PORT }}
        source: ./src/Publish/${{ env.NAME}}-${{ env.VERSION }}.zip
        target: prerelease/${{ env.NAME }}
        strip_components: 3
  
  build_and_publish_choco_package:
    
    runs-on: windows-2019
    defaults:
      run:
        working-directory: ./src
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100

      - name: Prepare environment variables
        run: |
          echo BASE_VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}) >> $GITHUB_ENV
          echo VERSION=$(echo ${GITHUB_REF/refs\/tags\/prerelease-/}.$GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo RUN_NUMBER=$(echo $GITHUB_RUN_NUMBER) >> $GITHUB_ENV
          echo TAG_NAME=$(echo ${GITHUB_REF/refs\/tags\/}) >> $GITHUB_ENV
          echo NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}') >> $GITHUB_ENV

      - name: Build
        run: 'dotnet publish --configuration Release --output Publish -r win-x64 --self-contained true /p:AssemblyVersion=${{ env.VERSION }} /p:FileVersion=${{ env.VERSION }}'

      - name: Create chocolatey package
        run: |
          choco new ${{ github.event.repository.name }} --outputdirectory="C:\Program Files\ChocoPackages" --version  $(($env:GITHUB_REF -replace "refs/tags/prerelease-") + $("-pre")) 

      - name: Delete powershell scripts
        run: |
          DEL "C:\Program Files\ChocoPackages\${{ github.event.repository.name }}\tools\*.ps1"

      - name: Zip build results
        run: |
          Compress-Archive -Path ./Publish/* -DestinationPath "C:\Program Files\ChocoPackages\${{ github.event.repository.name }}\tools\${{ github.event.repository.name }}-$(($env:GITHUB_REF -replace "refs/tags/prerelease-") + $("-pre")).zip" 

      - name: Push chocolatey package
        run: |
          cd "C:\Program Files\ChocoPackages\${{ github.event.repository.name }}"
          choco pack ${{ github.event.repository.name }}.nuspec
          choco push -s ${{ secrets.CHOCO_REPO }} -k ${{ secrets.CHOCO_API_KEY }} --force
          
  build_and_push_docker_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.NEXUS_DOCKER_USERNAME }}
        password: ${{ secrets.NEXUS_DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v2
      with:
        images: ${{ env.REGISTRY }}/${{ env.SERVICE }}
        flavor: |
          latest=false
        tags: |
          type=ref,event=tag

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        build-args: |
          SERVICE=${{ env.SERVICE }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
